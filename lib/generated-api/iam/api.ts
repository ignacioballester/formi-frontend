/* tslint:disable */
/* eslint-disable */
/**
 * Identity and Access Management API
 * API for managing roles and resources in the identity access management system
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthorizationCheckInput
 */
export interface AuthorizationCheckInput {
    /**
     * Name of the resource to check access to
     * @type {string}
     * @memberof AuthorizationCheckInput
     */
    'resource_name': string;
    /**
     * Optional list of scopes to check for
     * @type {Array<string>}
     * @memberof AuthorizationCheckInput
     */
    'scopes': Array<string>;
}
/**
 * 
 * @export
 * @interface AuthorizationCheckResult
 */
export interface AuthorizationCheckResult {
    /**
     * Whether the user is authorized to access the resource
     * @type {boolean}
     * @memberof AuthorizationCheckResult
     */
    'authorized': boolean;
}
/**
 * 
 * @export
 * @interface CreateResourceInput
 */
export interface CreateResourceInput {
    /**
     * Resource identifier
     * @type {number}
     * @memberof CreateResourceInput
     */
    'resource_id': number;
    /**
     * Type of resource
     * @type {string}
     * @memberof CreateResourceInput
     */
    'resource_type': CreateResourceInputResourceTypeEnum;
    /**
     * Parent resource ID if applicable
     * @type {number}
     * @memberof CreateResourceInput
     */
    'parent_id'?: number | null;
    /**
     * Parent resource type if applicable
     * @type {string}
     * @memberof CreateResourceInput
     */
    'parent_type'?: string | null;
}

export const CreateResourceInputResourceTypeEnum = {
    Enterprise: 'enterprise',
    Organization: 'organization',
    Project: 'project'
} as const;

export type CreateResourceInputResourceTypeEnum = typeof CreateResourceInputResourceTypeEnum[keyof typeof CreateResourceInputResourceTypeEnum];

/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * Group name
     * @type {string}
     * @memberof Group
     */
    'name': string;
    /**
     * Group ID
     * @type {string}
     * @memberof Group
     */
    'id'?: string;
    /**
     * 
     * @type {Array<Group>}
     * @memberof Group
     */
    'sub_groups'?: Array<Group>;
    /**
     * 
     * @type {Array<User>}
     * @memberof Group
     */
    'members'?: Array<User>;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
    /**
     * 
     * @type {object}
     * @memberof ModelError
     */
    'details'?: object;
}
/**
 * 
 * @export
 * @interface PermissionMap
 */
export interface PermissionMap {
    /**
     * Map of user IDs to permissions
     * @type {{ [key: string]: Array<string>; }}
     * @memberof PermissionMap
     */
    'users'?: { [key: string]: Array<string>; };
    /**
     * Map of group IDs to permissions
     * @type {{ [key: string]: Array<string>; }}
     * @memberof PermissionMap
     */
    'groups'?: { [key: string]: Array<string>; };
}
/**
 * 
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * Resource identifier
     * @type {string}
     * @memberof Resource
     */
    'id': string;
    /**
     * Resource name
     * @type {string}
     * @memberof Resource
     */
    'name': string;
    /**
     * Resource type
     * @type {string}
     * @memberof Resource
     */
    'type': string;
    /**
     * 
     * @type {ResourceAttributes}
     * @memberof Resource
     */
    'attributes': ResourceAttributes;
}
/**
 * 
 * @export
 * @interface ResourceAttributes
 */
export interface ResourceAttributes {
    /**
     * 
     * @type {PermissionMap}
     * @memberof ResourceAttributes
     */
    'permission_map'?: PermissionMap;
    /**
     * Parent resource name if applicable
     * @type {string}
     * @memberof ResourceAttributes
     */
    'resource_parent_name'?: string | null;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * Unique role name
     * @type {string}
     * @memberof Role
     */
    'name': string;
    /**
     * Type of resource this role applies to
     * @type {string}
     * @memberof Role
     */
    'resource_type': RoleResourceTypeEnum;
    /**
     * Human-readable role name
     * @type {string}
     * @memberof Role
     */
    'display_name': string;
    /**
     * List of permissions granted by this role
     * @type {Array<string>}
     * @memberof Role
     */
    'permissions': Array<string>;
}

export const RoleResourceTypeEnum = {
    Enterprise: 'enterprise',
    Organization: 'organization',
    Project: 'project'
} as const;

export type RoleResourceTypeEnum = typeof RoleResourceTypeEnum[keyof typeof RoleResourceTypeEnum];

/**
 * 
 * @export
 * @interface RoleAssignment
 */
export interface RoleAssignment {
    /**
     * Name of the resource
     * @type {string}
     * @memberof RoleAssignment
     */
    'resource_name': string;
    /**
     * ID of the principal (user or group)
     * @type {string}
     * @memberof RoleAssignment
     */
    'principal_id': string;
    /**
     * Type of the principal
     * @type {string}
     * @memberof RoleAssignment
     */
    'principal_type': RoleAssignmentPrincipalTypeEnum;
    /**
     * Name of the role to assign
     * @type {string}
     * @memberof RoleAssignment
     */
    'role_name': string;
}

export const RoleAssignmentPrincipalTypeEnum = {
    User: 'user',
    Group: 'group'
} as const;

export type RoleAssignmentPrincipalTypeEnum = typeof RoleAssignmentPrincipalTypeEnum[keyof typeof RoleAssignmentPrincipalTypeEnum];

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * User ID
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * Username
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * User\'s email address
     * @type {string}
     * @memberof User
     */
    'email'?: string | null;
}

/**
 * AuthorizationApi - axios parameter creator
 * @export
 */
export const AuthorizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check if a user is authorized to access a resource
         * @param {AuthorizationCheckInput} authorizationCheckInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUserAuthorized: async (authorizationCheckInput: AuthorizationCheckInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorizationCheckInput' is not null or undefined
            assertParamExists('isUserAuthorized', 'authorizationCheckInput', authorizationCheckInput)
            const localVarPath = `/authorization/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorizationCheckInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorizationApi - functional programming interface
 * @export
 */
export const AuthorizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Check if a user is authorized to access a resource
         * @param {AuthorizationCheckInput} authorizationCheckInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isUserAuthorized(authorizationCheckInput: AuthorizationCheckInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizationCheckResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isUserAuthorized(authorizationCheckInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorizationApi.isUserAuthorized']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthorizationApi - factory interface
 * @export
 */
export const AuthorizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorizationApiFp(configuration)
    return {
        /**
         * 
         * @summary Check if a user is authorized to access a resource
         * @param {AuthorizationCheckInput} authorizationCheckInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isUserAuthorized(authorizationCheckInput: AuthorizationCheckInput, options?: RawAxiosRequestConfig): AxiosPromise<AuthorizationCheckResult> {
            return localVarFp.isUserAuthorized(authorizationCheckInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorizationApi - interface
 * @export
 * @interface AuthorizationApi
 */
export interface AuthorizationApiInterface {
    /**
     * 
     * @summary Check if a user is authorized to access a resource
     * @param {AuthorizationCheckInput} authorizationCheckInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApiInterface
     */
    isUserAuthorized(authorizationCheckInput: AuthorizationCheckInput, options?: RawAxiosRequestConfig): AxiosPromise<AuthorizationCheckResult>;

}

/**
 * AuthorizationApi - object-oriented interface
 * @export
 * @class AuthorizationApi
 * @extends {BaseAPI}
 */
export class AuthorizationApi extends BaseAPI implements AuthorizationApiInterface {
    /**
     * 
     * @summary Check if a user is authorized to access a resource
     * @param {AuthorizationCheckInput} authorizationCheckInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public isUserAuthorized(authorizationCheckInput: AuthorizationCheckInput, options?: RawAxiosRequestConfig) {
        return AuthorizationApiFp(this.configuration).isUserAuthorized(authorizationCheckInput, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a group by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGroupById', 'id', id)
            const localVarPath = `/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a group by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupByName: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getGroupByName', 'name', name)
            const localVarPath = `/groups/name/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a group by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.getGroupById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a group by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupByName(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupByName(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.getGroupByName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroups(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Group>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroups(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupsApi.getGroups']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a group by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Group> {
            return localVarFp.getGroupById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a group by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupByName(name: string, options?: RawAxiosRequestConfig): AxiosPromise<Group> {
            return localVarFp.getGroupByName(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups(options?: RawAxiosRequestConfig): AxiosPromise<Array<Group>> {
            return localVarFp.getGroups(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupsApi - interface
 * @export
 * @interface GroupsApi
 */
export interface GroupsApiInterface {
    /**
     * 
     * @summary Get a group by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    getGroupById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Group>;

    /**
     * 
     * @summary Get a group by name
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    getGroupByName(name: string, options?: RawAxiosRequestConfig): AxiosPromise<Group>;

    /**
     * 
     * @summary List all groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApiInterface
     */
    getGroups(options?: RawAxiosRequestConfig): AxiosPromise<Array<Group>>;

}

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI implements GroupsApiInterface {
    /**
     * 
     * @summary Get a group by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupById(id: string, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a group by name
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupByName(name: string, options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupByName(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroups(options?: RawAxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroups(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ResourcesApi - axios parameter creator
 * @export
 */
export const ResourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new resource
         * @param {CreateResourceInput} createResourceInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResource: async (createResourceInput: CreateResourceInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createResourceInput' is not null or undefined
            assertParamExists('createResource', 'createResourceInput', createResourceInput)
            const localVarPath = `/resources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createResourceInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a resource
         * @param {string} resourceName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResource: async (resourceName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceName' is not null or undefined
            assertParamExists('deleteResource', 'resourceName', resourceName)
            const localVarPath = `/resources/{resource_name}`
                .replace(`{${"resource_name"}}`, encodeURIComponent(String(resourceName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get resource details
         * @param {string} resourceName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResource: async (resourceName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceName' is not null or undefined
            assertParamExists('getResource', 'resourceName', resourceName)
            const localVarPath = `/resources/{resource_name}`
                .replace(`{${"resource_name"}}`, encodeURIComponent(String(resourceName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update resource attributes
         * @param {string} resourceName 
         * @param {ResourceAttributes} resourceAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceAttributes: async (resourceName: string, resourceAttributes: ResourceAttributes, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceName' is not null or undefined
            assertParamExists('updateResourceAttributes', 'resourceName', resourceName)
            // verify required parameter 'resourceAttributes' is not null or undefined
            assertParamExists('updateResourceAttributes', 'resourceAttributes', resourceAttributes)
            const localVarPath = `/resources/{resource_name}`
                .replace(`{${"resource_name"}}`, encodeURIComponent(String(resourceName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceAttributes, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourcesApi - functional programming interface
 * @export
 */
export const ResourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new resource
         * @param {CreateResourceInput} createResourceInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createResource(createResourceInput: CreateResourceInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createResource(createResourceInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResourcesApi.createResource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a resource
         * @param {string} resourceName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteResource(resourceName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResource(resourceName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResourcesApi.deleteResource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get resource details
         * @param {string} resourceName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResource(resourceName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResource(resourceName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResourcesApi.getResource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update resource attributes
         * @param {string} resourceName 
         * @param {ResourceAttributes} resourceAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateResourceAttributes(resourceName: string, resourceAttributes: ResourceAttributes, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateResourceAttributes(resourceName, resourceAttributes, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ResourcesApi.updateResourceAttributes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ResourcesApi - factory interface
 * @export
 */
export const ResourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResourcesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new resource
         * @param {CreateResourceInput} createResourceInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResource(createResourceInput: CreateResourceInput, options?: RawAxiosRequestConfig): AxiosPromise<Resource> {
            return localVarFp.createResource(createResourceInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a resource
         * @param {string} resourceName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResource(resourceName: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteResource(resourceName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get resource details
         * @param {string} resourceName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResource(resourceName: string, options?: RawAxiosRequestConfig): AxiosPromise<Resource> {
            return localVarFp.getResource(resourceName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update resource attributes
         * @param {string} resourceName 
         * @param {ResourceAttributes} resourceAttributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceAttributes(resourceName: string, resourceAttributes: ResourceAttributes, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateResourceAttributes(resourceName, resourceAttributes, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResourcesApi - interface
 * @export
 * @interface ResourcesApi
 */
export interface ResourcesApiInterface {
    /**
     * 
     * @summary Create a new resource
     * @param {CreateResourceInput} createResourceInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApiInterface
     */
    createResource(createResourceInput: CreateResourceInput, options?: RawAxiosRequestConfig): AxiosPromise<Resource>;

    /**
     * 
     * @summary Delete a resource
     * @param {string} resourceName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApiInterface
     */
    deleteResource(resourceName: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get resource details
     * @param {string} resourceName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApiInterface
     */
    getResource(resourceName: string, options?: RawAxiosRequestConfig): AxiosPromise<Resource>;

    /**
     * 
     * @summary Update resource attributes
     * @param {string} resourceName 
     * @param {ResourceAttributes} resourceAttributes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApiInterface
     */
    updateResourceAttributes(resourceName: string, resourceAttributes: ResourceAttributes, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ResourcesApi - object-oriented interface
 * @export
 * @class ResourcesApi
 * @extends {BaseAPI}
 */
export class ResourcesApi extends BaseAPI implements ResourcesApiInterface {
    /**
     * 
     * @summary Create a new resource
     * @param {CreateResourceInput} createResourceInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public createResource(createResourceInput: CreateResourceInput, options?: RawAxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).createResource(createResourceInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a resource
     * @param {string} resourceName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public deleteResource(resourceName: string, options?: RawAxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).deleteResource(resourceName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get resource details
     * @param {string} resourceName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public getResource(resourceName: string, options?: RawAxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).getResource(resourceName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update resource attributes
     * @param {string} resourceName 
     * @param {ResourceAttributes} resourceAttributes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public updateResourceAttributes(resourceName: string, resourceAttributes: ResourceAttributes, options?: RawAxiosRequestConfig) {
        return ResourcesApiFp(this.configuration).updateResourceAttributes(resourceName, resourceAttributes, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RoleAssignmentsApi - axios parameter creator
 * @export
 */
export const RoleAssignmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new role assignment
         * @param {RoleAssignment} roleAssignment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoleAssignment: async (roleAssignment: RoleAssignment, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleAssignment' is not null or undefined
            assertParamExists('createRoleAssignment', 'roleAssignment', roleAssignment)
            const localVarPath = `/role-assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleAssignment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get role assignments for a principal (user or group)
         * @param {GetRoleAssignmentsOnPrincipalPrincipalTypeEnum} principalType 
         * @param {string} principalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAssignmentsOnPrincipal: async (principalType: GetRoleAssignmentsOnPrincipalPrincipalTypeEnum, principalId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'principalType' is not null or undefined
            assertParamExists('getRoleAssignmentsOnPrincipal', 'principalType', principalType)
            // verify required parameter 'principalId' is not null or undefined
            assertParamExists('getRoleAssignmentsOnPrincipal', 'principalId', principalId)
            const localVarPath = `/role-assignments/principals/{principal_type}/{principal_id}`
                .replace(`{${"principal_type"}}`, encodeURIComponent(String(principalType)))
                .replace(`{${"principal_id"}}`, encodeURIComponent(String(principalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get role assignments for a resource
         * @param {string} resourceName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAssignmentsOnResource: async (resourceName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceName' is not null or undefined
            assertParamExists('getRoleAssignmentsOnResource', 'resourceName', resourceName)
            const localVarPath = `/role-assignments/resources/{resource_name}`
                .replace(`{${"resource_name"}}`, encodeURIComponent(String(resourceName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a role assignment
         * @param {RoleAssignment} roleAssignment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleAssignment: async (roleAssignment: RoleAssignment, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleAssignment' is not null or undefined
            assertParamExists('removeRoleAssignment', 'roleAssignment', roleAssignment)
            const localVarPath = `/role-assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roleAssignment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleAssignmentsApi - functional programming interface
 * @export
 */
export const RoleAssignmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoleAssignmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new role assignment
         * @param {RoleAssignment} roleAssignment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoleAssignment(roleAssignment: RoleAssignment, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRoleAssignment(roleAssignment, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleAssignmentsApi.createRoleAssignment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get role assignments for a principal (user or group)
         * @param {GetRoleAssignmentsOnPrincipalPrincipalTypeEnum} principalType 
         * @param {string} principalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleAssignmentsOnPrincipal(principalType: GetRoleAssignmentsOnPrincipalPrincipalTypeEnum, principalId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleAssignment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleAssignmentsOnPrincipal(principalType, principalId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleAssignmentsApi.getRoleAssignmentsOnPrincipal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get role assignments for a resource
         * @param {string} resourceName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleAssignmentsOnResource(resourceName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleAssignment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleAssignmentsOnResource(resourceName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleAssignmentsApi.getRoleAssignmentsOnResource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove a role assignment
         * @param {RoleAssignment} roleAssignment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeRoleAssignment(roleAssignment: RoleAssignment, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeRoleAssignment(roleAssignment, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RoleAssignmentsApi.removeRoleAssignment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RoleAssignmentsApi - factory interface
 * @export
 */
export const RoleAssignmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoleAssignmentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new role assignment
         * @param {RoleAssignment} roleAssignment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoleAssignment(roleAssignment: RoleAssignment, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createRoleAssignment(roleAssignment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get role assignments for a principal (user or group)
         * @param {GetRoleAssignmentsOnPrincipalPrincipalTypeEnum} principalType 
         * @param {string} principalId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAssignmentsOnPrincipal(principalType: GetRoleAssignmentsOnPrincipalPrincipalTypeEnum, principalId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<RoleAssignment>> {
            return localVarFp.getRoleAssignmentsOnPrincipal(principalType, principalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get role assignments for a resource
         * @param {string} resourceName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAssignmentsOnResource(resourceName: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<RoleAssignment>> {
            return localVarFp.getRoleAssignmentsOnResource(resourceName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a role assignment
         * @param {RoleAssignment} roleAssignment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleAssignment(roleAssignment: RoleAssignment, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeRoleAssignment(roleAssignment, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoleAssignmentsApi - interface
 * @export
 * @interface RoleAssignmentsApi
 */
export interface RoleAssignmentsApiInterface {
    /**
     * 
     * @summary Create a new role assignment
     * @param {RoleAssignment} roleAssignment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApiInterface
     */
    createRoleAssignment(roleAssignment: RoleAssignment, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get role assignments for a principal (user or group)
     * @param {GetRoleAssignmentsOnPrincipalPrincipalTypeEnum} principalType 
     * @param {string} principalId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApiInterface
     */
    getRoleAssignmentsOnPrincipal(principalType: GetRoleAssignmentsOnPrincipalPrincipalTypeEnum, principalId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<RoleAssignment>>;

    /**
     * 
     * @summary Get role assignments for a resource
     * @param {string} resourceName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApiInterface
     */
    getRoleAssignmentsOnResource(resourceName: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<RoleAssignment>>;

    /**
     * 
     * @summary Remove a role assignment
     * @param {RoleAssignment} roleAssignment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApiInterface
     */
    removeRoleAssignment(roleAssignment: RoleAssignment, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * RoleAssignmentsApi - object-oriented interface
 * @export
 * @class RoleAssignmentsApi
 * @extends {BaseAPI}
 */
export class RoleAssignmentsApi extends BaseAPI implements RoleAssignmentsApiInterface {
    /**
     * 
     * @summary Create a new role assignment
     * @param {RoleAssignment} roleAssignment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    public createRoleAssignment(roleAssignment: RoleAssignment, options?: RawAxiosRequestConfig) {
        return RoleAssignmentsApiFp(this.configuration).createRoleAssignment(roleAssignment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get role assignments for a principal (user or group)
     * @param {GetRoleAssignmentsOnPrincipalPrincipalTypeEnum} principalType 
     * @param {string} principalId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    public getRoleAssignmentsOnPrincipal(principalType: GetRoleAssignmentsOnPrincipalPrincipalTypeEnum, principalId: string, options?: RawAxiosRequestConfig) {
        return RoleAssignmentsApiFp(this.configuration).getRoleAssignmentsOnPrincipal(principalType, principalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get role assignments for a resource
     * @param {string} resourceName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    public getRoleAssignmentsOnResource(resourceName: string, options?: RawAxiosRequestConfig) {
        return RoleAssignmentsApiFp(this.configuration).getRoleAssignmentsOnResource(resourceName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a role assignment
     * @param {RoleAssignment} roleAssignment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    public removeRoleAssignment(roleAssignment: RoleAssignment, options?: RawAxiosRequestConfig) {
        return RoleAssignmentsApiFp(this.configuration).removeRoleAssignment(roleAssignment, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetRoleAssignmentsOnPrincipalPrincipalTypeEnum = {
    User: 'user',
    Group: 'group'
} as const;
export type GetRoleAssignmentsOnPrincipalPrincipalTypeEnum = typeof GetRoleAssignmentsOnPrincipalPrincipalTypeEnum[keyof typeof GetRoleAssignmentsOnPrincipalPrincipalTypeEnum];


/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a role by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleByName: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getRoleByName', 'name', name)
            const localVarPath = `/roles/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all roles for a resource type
         * @param {GetRolesByResourceTypeResourceTypeEnum} resourceType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolesByResourceType: async (resourceType: GetRolesByResourceTypeResourceTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceType' is not null or undefined
            assertParamExists('getRolesByResourceType', 'resourceType', resourceType)
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (resourceType !== undefined) {
                localVarQueryParameter['resource_type'] = resourceType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a role by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleByName(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleByName(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.getRoleByName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all roles for a resource type
         * @param {GetRolesByResourceTypeResourceTypeEnum} resourceType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRolesByResourceType(resourceType: GetRolesByResourceTypeResourceTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRolesByResourceType(resourceType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RolesApi.getRolesByResourceType']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RolesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a role by name
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleByName(name: string, options?: RawAxiosRequestConfig): AxiosPromise<Role> {
            return localVarFp.getRoleByName(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all roles for a resource type
         * @param {GetRolesByResourceTypeResourceTypeEnum} resourceType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolesByResourceType(resourceType: GetRolesByResourceTypeResourceTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<Role>> {
            return localVarFp.getRolesByResourceType(resourceType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolesApi - interface
 * @export
 * @interface RolesApi
 */
export interface RolesApiInterface {
    /**
     * 
     * @summary Get a role by name
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    getRoleByName(name: string, options?: RawAxiosRequestConfig): AxiosPromise<Role>;

    /**
     * 
     * @summary List all roles for a resource type
     * @param {GetRolesByResourceTypeResourceTypeEnum} resourceType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    getRolesByResourceType(resourceType: GetRolesByResourceTypeResourceTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<Role>>;

}

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI implements RolesApiInterface {
    /**
     * 
     * @summary Get a role by name
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public getRoleByName(name: string, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).getRoleByName(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all roles for a resource type
     * @param {GetRolesByResourceTypeResourceTypeEnum} resourceType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public getRolesByResourceType(resourceType: GetRolesByResourceTypeResourceTypeEnum, options?: RawAxiosRequestConfig) {
        return RolesApiFp(this.configuration).getRolesByResourceType(resourceType, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetRolesByResourceTypeResourceTypeEnum = {
    Enterprise: 'enterprise',
    Organization: 'organization',
    Project: 'project'
} as const;
export type GetRolesByResourceTypeResourceTypeEnum = typeof GetRolesByResourceTypeResourceTypeEnum[keyof typeof GetRolesByResourceTypeResourceTypeEnum];


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a user by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserById', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user by username
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUsername: async (username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUserByUsername', 'username', username)
            const localVarPath = `/users/username/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a user by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUserById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a user by username
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByUsername(username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByUsername(username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUserByUsername']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a user by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getUserById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a user by username
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUsername(username: string, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getUserByUsername(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: RawAxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - interface
 * @export
 * @interface UsersApi
 */
export interface UsersApiInterface {
    /**
     * 
     * @summary Get a user by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @summary Get a user by username
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserByUsername(username: string, options?: RawAxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUsers(options?: RawAxiosRequestConfig): AxiosPromise<Array<User>>;

}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI implements UsersApiInterface {
    /**
     * 
     * @summary Get a user by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserById(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a user by username
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserByUsername(username: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserByUsername(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsers(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }
}




/* tslint:disable */
/* eslint-disable */
/**
 * Secret Management API
 * API for managing secrets in the system
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface SecretCreate
 */
export interface SecretCreate {
    /**
     * 
     * @type {string}
     * @memberof SecretCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SecretCreate
     */
    'display_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SecretCreate
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof SecretCreate
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof SecretCreate
     */
    'organization_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof SecretCreate
     */
    'project_id'?: number;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof SecretCreate
     */
    'data': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface SecretDataTypeAttribute
 */
export interface SecretDataTypeAttribute {
    /**
     * 
     * @type {string}
     * @memberof SecretDataTypeAttribute
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SecretDataTypeAttribute
     */
    'type': string;
    /**
     * 
     * @type {boolean}
     * @memberof SecretDataTypeAttribute
     */
    'private': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SecretDataTypeAttribute
     */
    'required': boolean;
}
/**
 * 
 * @export
 * @interface SecretResponse
 */
export interface SecretResponse {
    /**
     * 
     * @type {string}
     * @memberof SecretResponse
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SecretResponse
     */
    'display_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SecretResponse
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof SecretResponse
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof SecretResponse
     */
    'organization_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof SecretResponse
     */
    'project_id'?: number;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof SecretResponse
     */
    'data'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface SecretType
 */
export interface SecretType {
    /**
     * 
     * @type {string}
     * @memberof SecretType
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SecretType
     */
    'displayName': string;
    /**
     * 
     * @type {string}
     * @memberof SecretType
     */
    'description': string;
    /**
     * 
     * @type {Array<SecretDataTypeAttribute>}
     * @memberof SecretType
     */
    'dataAttributes': Array<SecretDataTypeAttribute>;
}
/**
 * 
 * @export
 * @interface SecretUpdate
 */
export interface SecretUpdate {
    /**
     * 
     * @type {string}
     * @memberof SecretUpdate
     */
    'display_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SecretUpdate
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof SecretUpdate
     */
    'organization_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof SecretUpdate
     */
    'project_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SecretUpdate
     */
    'type': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof SecretUpdate
     */
    'data'?: { [key: string]: any; };
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new secret
         * @param {SecretCreate} secretCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSecret: async (secretCreate: SecretCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'secretCreate' is not null or undefined
            assertParamExists('createSecret', 'secretCreate', secretCreate)
            const localVarPath = `/secrets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(secretCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a secret
         * @param {string} name 
         * @param {string} type 
         * @param {number} [organizationId] 
         * @param {number} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSecret: async (name: string, type: string, organizationId?: number, projectId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteSecret', 'name', name)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('deleteSecret', 'type', type)
            const localVarPath = `/secrets/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organization_id'] = organizationId;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific secret
         * @param {string} name 
         * @param {string} type 
         * @param {number} [organizationId] 
         * @param {number} [projectId] 
         * @param {boolean} [includePrivate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecret: async (name: string, type: string, organizationId?: number, projectId?: number, includePrivate?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getSecret', 'name', name)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getSecret', 'type', type)
            const localVarPath = `/secrets/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organization_id'] = organizationId;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (includePrivate !== undefined) {
                localVarQueryParameter['include_private'] = includePrivate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all secret types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecretTypes: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/secrets/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all secrets
         * @param {number} [organizationId] 
         * @param {number} [projectId] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecrets: async (organizationId?: number, projectId?: number, type?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/secrets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organization_id'] = organizationId;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a secret
         * @param {string} name 
         * @param {SecretUpdate} secretUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSecret: async (name: string, secretUpdate: SecretUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateSecret', 'name', name)
            // verify required parameter 'secretUpdate' is not null or undefined
            assertParamExists('updateSecret', 'secretUpdate', secretUpdate)
            const localVarPath = `/secrets/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(secretUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new secret
         * @param {SecretCreate} secretCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSecret(secretCreate: SecretCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecretResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSecret(secretCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createSecret']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a secret
         * @param {string} name 
         * @param {string} type 
         * @param {number} [organizationId] 
         * @param {number} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSecret(name: string, type: string, organizationId?: number, projectId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSecret(name, type, organizationId, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteSecret']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a specific secret
         * @param {string} name 
         * @param {string} type 
         * @param {number} [organizationId] 
         * @param {number} [projectId] 
         * @param {boolean} [includePrivate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSecret(name: string, type: string, organizationId?: number, projectId?: number, includePrivate?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecretResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSecret(name, type, organizationId, projectId, includePrivate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSecret']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all secret types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSecretTypes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SecretType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSecretTypes(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listSecretTypes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all secrets
         * @param {number} [organizationId] 
         * @param {number} [projectId] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSecrets(organizationId?: number, projectId?: number, type?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SecretResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSecrets(organizationId, projectId, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listSecrets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a secret
         * @param {string} name 
         * @param {SecretUpdate} secretUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSecret(name: string, secretUpdate: SecretUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecretResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSecret(name, secretUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateSecret']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new secret
         * @param {SecretCreate} secretCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSecret(secretCreate: SecretCreate, options?: RawAxiosRequestConfig): AxiosPromise<SecretResponse> {
            return localVarFp.createSecret(secretCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a secret
         * @param {string} name 
         * @param {string} type 
         * @param {number} [organizationId] 
         * @param {number} [projectId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSecret(name: string, type: string, organizationId?: number, projectId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSecret(name, type, organizationId, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific secret
         * @param {string} name 
         * @param {string} type 
         * @param {number} [organizationId] 
         * @param {number} [projectId] 
         * @param {boolean} [includePrivate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecret(name: string, type: string, organizationId?: number, projectId?: number, includePrivate?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<SecretResponse> {
            return localVarFp.getSecret(name, type, organizationId, projectId, includePrivate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all secret types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecretTypes(options?: RawAxiosRequestConfig): AxiosPromise<Array<SecretType>> {
            return localVarFp.listSecretTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all secrets
         * @param {number} [organizationId] 
         * @param {number} [projectId] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecrets(organizationId?: number, projectId?: number, type?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SecretResponse>> {
            return localVarFp.listSecrets(organizationId, projectId, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a secret
         * @param {string} name 
         * @param {SecretUpdate} secretUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSecret(name: string, secretUpdate: SecretUpdate, options?: RawAxiosRequestConfig): AxiosPromise<SecretResponse> {
            return localVarFp.updateSecret(name, secretUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Create a new secret
     * @param {SecretCreate} secretCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createSecret(secretCreate: SecretCreate, options?: RawAxiosRequestConfig): AxiosPromise<SecretResponse>;

    /**
     * 
     * @summary Delete a secret
     * @param {string} name 
     * @param {string} type 
     * @param {number} [organizationId] 
     * @param {number} [projectId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteSecret(name: string, type: string, organizationId?: number, projectId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get a specific secret
     * @param {string} name 
     * @param {string} type 
     * @param {number} [organizationId] 
     * @param {number} [projectId] 
     * @param {boolean} [includePrivate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSecret(name: string, type: string, organizationId?: number, projectId?: number, includePrivate?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<SecretResponse>;

    /**
     * 
     * @summary List all secret types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listSecretTypes(options?: RawAxiosRequestConfig): AxiosPromise<Array<SecretType>>;

    /**
     * 
     * @summary List all secrets
     * @param {number} [organizationId] 
     * @param {number} [projectId] 
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listSecrets(organizationId?: number, projectId?: number, type?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SecretResponse>>;

    /**
     * 
     * @summary Update a secret
     * @param {string} name 
     * @param {SecretUpdate} secretUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateSecret(name: string, secretUpdate: SecretUpdate, options?: RawAxiosRequestConfig): AxiosPromise<SecretResponse>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Create a new secret
     * @param {SecretCreate} secretCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSecret(secretCreate: SecretCreate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createSecret(secretCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a secret
     * @param {string} name 
     * @param {string} type 
     * @param {number} [organizationId] 
     * @param {number} [projectId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSecret(name: string, type: string, organizationId?: number, projectId?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSecret(name, type, organizationId, projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific secret
     * @param {string} name 
     * @param {string} type 
     * @param {number} [organizationId] 
     * @param {number} [projectId] 
     * @param {boolean} [includePrivate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSecret(name: string, type: string, organizationId?: number, projectId?: number, includePrivate?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSecret(name, type, organizationId, projectId, includePrivate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all secret types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSecretTypes(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listSecretTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all secrets
     * @param {number} [organizationId] 
     * @param {number} [projectId] 
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSecrets(organizationId?: number, projectId?: number, type?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listSecrets(organizationId, projectId, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a secret
     * @param {string} name 
     * @param {SecretUpdate} secretUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSecret(name: string, secretUpdate: SecretUpdate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSecret(name, secretUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



